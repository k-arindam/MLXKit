{"includedArchiveIdentifiers":["MLXKit"],"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/multiarraytype\/*(_:_:)","title":"static func * (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/mlxkit\/multiarraytype\/+(_:_:)","title":"static func + (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/mlxkit\/multiarraytype\/-(_:_:)","title":"static func - (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/mlxkit\/multiarraytype\/_(_:_:)","title":"static func \/ (Self, Self) -> Self","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/multiarraytype\/init(_:)","title":"init(Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/multiarraytype\/touint8","title":"var toUInt8: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/multiarraytype\/multiarraydatatype","title":"static var multiArrayDataType: MLMultiArrayDataType","type":"property"}],"path":"\/documentation\/mlxkit\/multiarraytype","title":"MultiArrayType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/boundingbox\/init(classindex:score:rect:)","title":"init(classIndex: Int, score: Float, rect: CGRect)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/boundingbox\/classindex","title":"let classIndex: Int","type":"property"},{"path":"\/documentation\/mlxkit\/boundingbox\/rect","title":"let rect: CGRect","type":"property"},{"path":"\/documentation\/mlxkit\/boundingbox\/score","title":"let score: Float","type":"property"}],"path":"\/documentation\/mlxkit\/boundingbox","title":"BoundingBox","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/iou(_:_:)","title":"func IOU(CGRect, CGRect) -> Float","type":"func"},{"path":"\/documentation\/mlxkit\/argmax(_:count:)-7cimk","title":"func argmax([Float], count: Int?) -> (Int, Float)","type":"func"},{"path":"\/documentation\/mlxkit\/argmax(_:count:)-8o8jk","title":"func argmax([Double], count: Int?) -> (Int, Double)","type":"func"},{"path":"\/documentation\/mlxkit\/argmax(_:count:stride:)-5vk7k","title":"func argmax(UnsafePointer<Double>, count: Int, stride: Int) -> (Int, Double)","type":"func"},{"path":"\/documentation\/mlxkit\/argmax(_:count:stride:)-bmxp","title":"func argmax(UnsafePointer<Float>, count: Int, stride: Int) -> (Int, Float)","type":"func"},{"path":"\/documentation\/mlxkit\/clamp(_:min:max:)","title":"func clamp<T>(T, min: T, max: T) -> T","type":"func"},{"path":"\/documentation\/mlxkit\/createcgimage(fromfloatarray:min:max:)","title":"func createCGImage(fromFloatArray: MLMultiArray, min: Float, max: Float) -> CGImage?","type":"func"},{"path":"\/documentation\/mlxkit\/nonmaxsuppression(boundingboxes:indices:iouthreshold:maxboxes:)","title":"func nonMaxSuppression(boundingBoxes: [BoundingBox], indices: [Int], iouThreshold: Float, maxBoxes: Int) -> [Int]","type":"func"},{"path":"\/documentation\/mlxkit\/nonmaxsuppression(boundingboxes:iouthreshold:maxboxes:)","title":"func nonMaxSuppression(boundingBoxes: [BoundingBox], iouThreshold: Float, maxBoxes: Int) -> [Int]","type":"func"},{"path":"\/documentation\/mlxkit\/nonmaxsuppressionmulticlass(numclasses:boundingboxes:scorethreshold:iouthreshold:maxperclass:maxtotal:)","title":"func nonMaxSuppressionMultiClass(numClasses: Int, boundingBoxes: [BoundingBox], scoreThreshold: Float, iouThreshold: Float, maxPerClass: Int, maxTotal: Int) -> [Int]","type":"func"},{"path":"\/documentation\/mlxkit\/resizepixelbuffer(_:width:height:output:context:)","title":"func resizePixelBuffer(CVPixelBuffer, width: Int, height: Int, output: CVPixelBuffer, context: CIContext)","type":"func"},{"path":"\/documentation\/mlxkit\/resizepixelbuffer(from:to:cropx:cropy:cropwidth:cropheight:scalewidth:scaleheight:)","title":"func resizePixelBuffer(from: CVPixelBuffer, to: CVPixelBuffer, cropX: Int, cropY: Int, cropWidth: Int, cropHeight: Int, scaleWidth: Int, scaleHeight: Int)","type":"func"},{"path":"\/documentation\/mlxkit\/resizepixelbuffer(from:to:width:height:)","title":"func resizePixelBuffer(from: CVPixelBuffer, to: CVPixelBuffer, width: Int, height: Int)","type":"func"},{"path":"\/documentation\/mlxkit\/rotate90pixelbuffer(from:to:factor:)","title":"func rotate90PixelBuffer(from: CVPixelBuffer, to: CVPixelBuffer, factor: UInt8)","type":"func"},{"path":"\/documentation\/mlxkit\/sigmoid(_:)-1gq1y","title":"func sigmoid(Double) -> Double","type":"func"},{"path":"\/documentation\/mlxkit\/sigmoid(_:)-1gqma","title":"func sigmoid(Float) -> Float","type":"func"},{"path":"\/documentation\/mlxkit\/sigmoid(_:count:)-187fz","title":"func sigmoid(UnsafeMutablePointer<Double>, count: Int)","type":"func"},{"path":"\/documentation\/mlxkit\/sigmoid(_:count:)-geiz","title":"func sigmoid(UnsafeMutablePointer<Float>, count: Int)","type":"func"},{"path":"\/documentation\/mlxkit\/softmax(_:)","title":"func softmax([Float]) -> [Float]","type":"func"},{"path":"\/documentation\/mlxkit\/top(_:_:)-7cgxj","title":"func top(Int, [String : Double]) -> [(String, Double)]","type":"func"},{"path":"\/documentation\/mlxkit\/top(_:_:)-920z1","title":"func top(Int, [VNClassificationObservation]) -> [(String, Double)]","type":"func"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/combine\/publisher\/prediction(model:)-1af11","title":"func prediction(model: MLModel) -> Publishers.Map<Self, Result<any MLFeatureProvider, any Error>>","type":"method"},{"path":"\/documentation\/mlxkit\/combine\/publisher\/prediction(model:)-1skpy","title":"func prediction(model: MLModel) -> Publishers.TryMap<Self, (any MLFeatureProvider)?>","type":"method"},{"path":"\/documentation\/mlxkit\/combine\/publisher\/prediction(model:)-2dzar","title":"func prediction(model: MLModel) -> Publishers.CompactMap<Self, any MLFeatureProvider>","type":"method"}],"path":"\/documentation\/mlxkit\/combine\/publisher","title":"Publisher","type":"extension"}],"path":"\/documentation\/mlxkit\/combine","title":"Combine","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/pixelbuffer()","title":"func pixelBuffer() -> CVPixelBuffer?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/pixelbuffer(width:height:orientation:)","title":"func pixelBuffer(width: Int, height: Int, orientation: CGImagePropertyOrientation) -> CVPixelBuffer?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/pixelbuffer(width:height:pixelformattype:colorspace:alphainfo:orientation:)","title":"func pixelBuffer(width: Int, height: Int, pixelFormatType: OSType, colorSpace: CGColorSpace, alphaInfo: CGImageAlphaInfo, orientation: CGImagePropertyOrientation) -> CVPixelBuffer?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/pixelbuffergray()","title":"func pixelBufferGray() -> CVPixelBuffer?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/pixelbuffergray(width:height:orientation:)","title":"func pixelBufferGray(width: Int, height: Int, orientation: CGImagePropertyOrientation) -> CVPixelBuffer?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/tobytearrayrgba()","title":"func toByteArrayRGBA() -> [UInt8]","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/create(pixelbuffer:)","title":"static func create(pixelBuffer: CVPixelBuffer) -> CGImage?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/create(pixelbuffer:context:)","title":"static func create(pixelBuffer: CVPixelBuffer, context: CIContext) -> CGImage?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/frombytearraygray(_:width:height:)","title":"class func fromByteArrayGray([UInt8], width: Int, height: Int) -> CGImage?","type":"method"},{"path":"\/documentation\/mlxkit\/coregraphics\/cgimage\/frombytearrayrgba(_:width:height:)","title":"class func fromByteArrayRGBA([UInt8], width: Int, height: Int) -> CGImage?","type":"method"}],"path":"\/documentation\/mlxkit\/coregraphics\/cgimage","title":"CGImage","type":"extension"}],"path":"\/documentation\/mlxkit\/coregraphics","title":"CoreGraphics","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/coreml\/mlmodel\/featurevalue(fromcgimage:forinput:orientation:options:)","title":"func featureValue(fromCGImage: CGImage, forInput: String, orientation: CGImagePropertyOrientation, options: [MLFeatureValue.ImageOption : Any]?) -> MLFeatureValue?","type":"method"},{"path":"\/documentation\/mlxkit\/coreml\/mlmodel\/featurevalue(fromimageat:forinput:orientation:options:)","title":"func featureValue(fromImageAt: URL, forInput: String, orientation: CGImagePropertyOrientation, options: [MLFeatureValue.ImageOption : Any]?) -> MLFeatureValue?","type":"method"},{"path":"\/documentation\/mlxkit\/coreml\/mlmodel\/imageconstraint(forinput:)","title":"func imageConstraint(forInput: String) -> MLImageConstraint?","type":"method"}],"path":"\/documentation\/mlxkit\/coreml\/mlmodel","title":"MLModel","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/coreml\/mlmultiarray\/cgimage(min:max:channel:axes:)","title":"func cgImage(min: Double, max: Double, channel: Int?, axes: (Int, Int, Int)?) -> CGImage?","type":"method"},{"path":"\/documentation\/mlxkit\/coreml\/mlmultiarray\/reshaped(to:)","title":"func reshaped(to: [Int]) throws -> MLMultiArray","type":"method"},{"path":"\/documentation\/mlxkit\/coreml\/mlmultiarray\/torawbytes(min:max:channel:axes:)","title":"func toRawBytes<T>(min: T, max: T, channel: Int?, axes: (Int, Int, Int)?) -> (bytes: [UInt8], width: Int, height: Int, channels: Int)?","type":"method"},{"path":"\/documentation\/mlxkit\/coreml\/mlmultiarray\/transposed(to:)","title":"func transposed(to: [Int]) throws -> MLMultiArray","type":"method"}],"path":"\/documentation\/mlxkit\/coreml\/mlmultiarray","title":"MLMultiArray","type":"extension"}],"path":"\/documentation\/mlxkit\/coreml","title":"CoreML","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/array\/argmax()","title":"func argmax() -> (Int, Element)","type":"method"},{"path":"\/documentation\/mlxkit\/swift\/array\/argsort(by:)","title":"func argsort(by: (Element, Element) -> Bool) -> [Array<Element>.Index]","type":"method"},{"path":"\/documentation\/mlxkit\/swift\/array\/gather(indices:)","title":"func gather(indices: [Array<Element>.Index]) -> [Element]","type":"method"}],"path":"\/documentation\/mlxkit\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/double\/touint8","title":"var toUInt8: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/double\/multiarraydatatype","title":"static var multiArrayDataType: MLMultiArrayDataType","type":"property"}],"path":"\/documentation\/mlxkit\/swift\/double\/multiarraytype-implementations","title":"MultiArrayType Implementations","type":"symbol"}],"path":"\/documentation\/mlxkit\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/float\/touint8","title":"var toUInt8: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/float\/multiarraydatatype","title":"static var multiArrayDataType: MLMultiArrayDataType","type":"property"}],"path":"\/documentation\/mlxkit\/swift\/float\/multiarraytype-implementations","title":"MultiArrayType Implementations","type":"symbol"}],"path":"\/documentation\/mlxkit\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/int32\/touint8","title":"var toUInt8: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mlxkit\/swift\/int32\/multiarraydatatype","title":"static var multiArrayDataType: MLMultiArrayDataType","type":"property"}],"path":"\/documentation\/mlxkit\/swift\/int32\/multiarraytype-implementations","title":"MultiArrayType Implementations","type":"symbol"}],"path":"\/documentation\/mlxkit\/swift\/int32","title":"Int32","type":"extension"}],"path":"\/documentation\/mlxkit\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/mlxkit","title":"MLXKit","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}